// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { Agenda } from "./Agenda";
import type { AgendaElect } from "./AgendaElect";
import type { AgendaElectKind } from "./AgendaElectKind";
import type { AgendaKind } from "./AgendaKind";
import type { Vote } from "./Vote";

export type VoteState = { 
/**
 * The revealed agenda.
 */
agenda: Agenda, 
/**
 * The kind of revealed agenda.
 */
kind: AgendaKind, 
/**
 * The elect kind of the revealed agenda.
 */
elect: AgendaElectKind, 
/**
 * All the possible things you can vote for.
 */
candidates: Array<AgendaElect>, 
/**
 * Player-cast votes.
 */
playerVotes: { [key: string]: Vote | null }, 
/**
 * Votes tallied on a per-outcome basis.
 *
 * Calculated by calling [VoteState::tally_votes].
 */
outcomesByVotes: Array<Vote>, 
/**
 * The outcome of the vote, if it were to end.
 *
 * If the expected outcome can't be determined (i.e. in case of a tie), this is `None`.
 * Calculated by calling [VoteState::tally_votes].
 */
expectedOutcome: AgendaElect | null, };